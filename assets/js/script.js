// example questions were generated by chatGPT from a prompt I entered, cited in README
const questions = [
    {
        question: "What does 'HTML' stand for?",
        answers: [
            { option: 'Hyper Text Markup Language', correct: true },
            { option: 'Hyperlink and Text Markup Language', correct: false },
            { option: 'Highly Typed Markup Language', correct: false },
            { option: 'Home Tool Markup Language', correct: false },
        ],
    },
    {
        question: "Which keyword is used to declare a variable in JavaScript?",
        answers: [
            { option: 'var', correct: true },
            { option: 'let', correct: false },
            { option: 'const', correct: false },
            { option: 'variable', correct: false },
        ],
    },
    {
        question: "What is the result of '5 + '5' in JavaScript?",
        answers: [
            { option: '10', correct: false },
            { option: '55', correct: true },
            { option: '5 + 5', correct: false },
            { option: 'Error', correct: false },
        ],
    } //,
    // {
    //     question: "Which function is used to print something to the console in JavaScript?",
    //     answers: [
    //         { option: 'print()', correct: false },
    //         { option: 'log()', correct: false },
    //         { option: 'console.log()', correct: true },
    //         { option: 'display()', correct: false },
    //     ],
    // },
    // {
    //     question: "What is the value of 'null' in JavaScript?",
    //     answers: [
    //         { option: '0', correct: false },
    //         { option: 'undefined', correct: false },
    //         { option: 'false', correct: false },
    //         { option: 'null', correct: true },
    //     ],
    // },
    // {
    //     question: "What does 'NaN' stand for in JavaScript?",
    //     answers: [
    //         { option: 'Not a Number', correct: true },
    //         { option: 'No Available Number', correct: false },
    //         { option: 'Notation of Number', correct: false },
    //         { option: 'No Action Needed', correct: false },
    //     ],
    // },
    // {
    //     question: "Which loop is used for iterating over the properties of an object?",
    //     answers: [
    //         { option: 'for loop', correct: false },
    //         { option: 'while loop', correct: false },
    //         { option: 'for...in loop', correct: true },
    //         { option: 'do...while loop', correct: false },
    //     ],
    // },
    // {
    //     question: "What is the result of '3 === '3' in JavaScript?",
    //     answers: [
    //         { option: 'true', correct: false },
    //         { option: 'false', correct: true },
    //         { option: 'undefined', correct: false },
    //         { option: 'null', correct: false },
    //     ],
    // },
    // {
    //     question: "Which operator is used to combine two or more strings in JavaScript?",
    //     answers: [
    //         { option: '+', correct: true },
    //         { option: '-', correct: false },
    //         { option: '*', correct: false },
    //         { option: '/', correct: false },
    //     ],
    // },
    // {
    //     question: "What is the correct way to write a comment in JavaScript?",
    //     answers: [
    //         { option: '// This is a comment', correct: true },
    //         { option: '<!-- This is a comment -->', correct: false },
    //         { option: '/* This is a comment */', correct: false },
    //         { option: '# This is a comment', correct: false },
    //     ],
    // },
];

// DOM selector constants for manipulation
const startButtonEl = document.getElementById('start');
const nextButtonEl = document.getElementById('next');
const startPageEl = document.getElementById('start-page');
const questionPageEl = document.getElementById('question-container');
const questionEl = document.getElementById('question');
const answerChoicesEl = document.getElementById('answer-choices');
const countdownEl = document.getElementById('shot-clock');
const highScoreEl = document.getElementById('high-score');
const endPageEl = document.getElementById('end-page');
const userScoreEl = document.getElementById('user-score');
const highScorePageEl = document.getElementById('high-score-page');
const postScoreBtnEl = document.getElementById('post-score');
const userNameEl = document.getElementById('user-name');
const clearScoresButtonEl = document.getElementById('clear-scores');
const goBackButtonEl = document.getElementById('go-back');
const scoreListEl = document.getElementById('scores-list');
const labelZeroEl = document.getElementById('user-zero');

// general variables
let randomQuestions; 
let questionIndex;
let ptsPerQuestion = 100/questions.length;
let userPts;
let quizFinished;
let timer;
let secondsLeft;
let highScores;

// functions

// set up the scoreboard by reading the scores in local storage
function init() {
    // set or reset variables
    quizFinished = false;
    secondsLeft = 121;
    highScores = [];
    
    // reset elements
    startPageEl.classList.remove('not-visible');
    countdownEl.classList.add('not-visible');
    countdownEl.textContent = "Timer: " + minAndSec();
    userNameEl.classList.remove('not-visible');
    postScoreBtnEl.classList.remove('not-visible')

    // clear pages and default to start
    let pages = [questionPageEl, endPageEl, highScorePageEl]
    pages.forEach(page => {
        if (!page.classList.contains('not-visible')) {
            page.classList.add('not-visible');
        }
    });
  
    // clear buttons and add start
    let buttons = [nextButtonEl, clearScoresButtonEl, goBackButtonEl];
    buttons.forEach(button => {
        if(!button.classList.contains('not-visible')) {
            button.classList.add('not-visible')
        }
    });
    startButtonEl.classList.remove('not-visible');
    // load scores in local storage if they exist
    let storedScores = JSON.parse(localStorage.getItem("High Scores"));
        if (storedScores !== null) {
            highScores = storedScores;
        }
}

// executes on "Start Game" button on start page
function startQuiz() {
    // show only the start page
    countdownEl.classList.remove('not-visible');
    startPageEl.classList.add('not-visible');
    highScoreEl.classList.add('not-visible');
    startButtonEl.classList.add('not-visible');
    questionPageEl.classList.remove('not-visible');
    nextButtonEl.classList.remove('not-visible');
    // reset game points
    userPts = 0;
    // shuffle questions
    randomQuestions = questions.sort(() => Math.random() -0.5 ); // investigate changing random method
    setCountdownTimer();
    questionIndex = 0;
    setNextQuestion();
}

// function calculates number ofm inputs and seconds remaining and returns
function minAndSec() {
    secondsLeft--;
    let m = Math.floor(secondsLeft/60);
    let s = secondsLeft%60;
    let timeLeft = ( (m < 10) ? "0" : "" ) + m + ":" + ( (s < 10) ? "0" : "" ) + s;
    console.log("minAndSec Call: " + timeLeft);
    return timeLeft;
}

function setCountdownTimer() {
    timer = setInterval(function() {
        if (secondsLeft >= 0){
            if (quizFinished){
                clearInterval(timer);
                gameOverScreen();
            }
        }
        if(secondsLeft === 0) {
            clearInterval(timer);
            gameOverScreen();
        }
        countdownEl.textContent = "Timer: " + minAndSec();
    }, 1000);
}

function clearCard(){
    nextButtonEl.classList.add('not-visible');
    while (answerChoicesEl.firstChild) {
        answerChoicesEl.removeChild(answerChoicesEl.firstChild);
    }
}

function viewQuestion(question) {
    questionEl.innerText = question.question;
    question.answers.forEach(answer => {
        const button = document.createElement('button');
        button.innerText = answer.option;
        button.classList.add('answer-choice');
         // check if correct
         if(answer.correct){
            button.dataset.correct = answer.correct;
         }
         button.addEventListener('click', () => {
            selectAnswer(button.dataset.correct);
         }, {once: true});
         answerChoicesEl.appendChild(button);
    })
}

function setNextQuestion(){
    clearCard();
    viewQuestion(randomQuestions[questionIndex]);
}

function nextQuestion() {
    questionIndex++;
    setNextQuestion();
}

function selectAnswer(userAnswer) {
    // check if selected answer is correct
    if (userAnswer){
        userPts += ptsPerQuestion;
    } else {
        if (secondsLeft >= 5) {
            secondsLeft -= 5;
        } else {
            gameOverScreen();
        }
    }
    // assign right or wrong values answer verification    
    let choiceArr = Array.from(answerChoicesEl.children);
    choiceArr.forEach(button => {
        setClass(button, button.dataset.correct);
    });
    if (randomQuestions.length > questionIndex +1) {
        nextButtonEl.classList.remove('not-visible');
    } else {
        quizFinished = true;
    }
}

function setClass(buttonEl, correct) {
    clearClassStatus(buttonEl);
    if (correct) {
        buttonEl.classList.add('correct')
    } else {
        buttonEl.classList.add('wrong')
    }
}

function clearClassStatus(eL) {
    eL.classList.remove('correct');
    eL.classList.remove('wrong');
}

// Show final screen with timer and high score input.
function gameOverScreen() {
    questionPageEl.classList.add('not-visible');
    nextButtonEl.classList.add('not-visible');
    endPageEl.classList.remove('not-visible');
    userScoreEl.textContent = "You scored " + Math.floor(userPts) + " out of 100!";
    if (userPts === 0) {
        userNameEl.classList.add('not-visible');
        postScoreBtnEl.classList.add('not-visible')
        labelZeroEl.textContent = "You scored zero, try again";
        goBackButtonEl.classList.remove('not-visible');
    } else {
        // button event listener for adding to high score
        labelZeroEl.textContent = "Enter Initials: ";
        postScoreBtnEl.addEventListener('click', function() {
            highScores.push({user: userNameEl.value, score: Math.floor(userPts)});
            localStorage.setItem("High Scores", JSON.stringify(highScores)); 
        });
    }
}

// show high scores
function viewScores() {
    renderScores();
    let pages = [startPageEl, questionPageEl, endPageEl, highScorePageEl]
    pages.forEach(page => {
        if (!page.classList.contains('not-visible')) {
            let goBack = page;
            page.classList.add('not-visible');
            startButtonEl.classList.add('not-visible');
            nextButtonEl.classList.add('not-visible');
        }
    });  
    highScorePageEl.classList.remove('not-visible');
    clearScoresButtonEl.classList.remove('not-visible');
    goBackButtonEl.classList.remove('not-visible');
    clearScoresButtonEl.addEventListener('click', clearScores)
}

function renderScores() {
    highScores.sort((a,b) => (a.score < b.score) ? 1 : -1);
    scoreListEl.innerHTML = "";
    // Render a new li for each todo
    for (let i = 0; i < highScores.length; i++) {
        let highScoreText = highScores[i].user + " - " + highScores[i].score;
        let li = document.createElement("li");
        li.textContent = highScoreText;
        scoreListEl.appendChild(li);
    }
}

function clearScores() {
    highScores = [];
    localStorage.clear();
    renderScores()
}

// init function to read local storage for scores
init();

// Event listener for clicking start button
startButtonEl.addEventListener('click', startQuiz);
nextButtonEl.addEventListener('click', nextQuestion);
highScoreEl.addEventListener('click', viewScores);
goBackButtonEl.addEventListener('click', init);


